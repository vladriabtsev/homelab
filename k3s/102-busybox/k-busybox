#!/usr/bin/env bash
# This script was generated by bashly 1.1.9 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
k_busybox_usage() {
  if [[ -n $long_usage ]]; then
    printf "k-busybox - busybox on kubernetes\n"
    echo

  else
    printf "k-busybox - busybox on kubernetes\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  k-busybox [OPTIONS] COMMAND\n"
  printf "  k-busybox [COMMAND] --help | -h\n"
  printf "  k-busybox --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Install busybox deployment\n" "$(green "install")"
  printf "  %s   Upgarde busybox deployment\n" "$(green "upgrade")"
  printf "  %s   Delete busybox deployment\n" "$(green "delete") "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--verbose")"
    printf "    Enabling verbose Mode (set -v, print every line before it's processed)\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--xtrace")"
    printf "    Using xtrace Mode\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--unset")"
    printf "    Identifying Unset Variables\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--noerrexit")"
    printf "    No exit on error\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--noexec")"
    printf "    No exec mode. Check syntax without execution\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--debug")"
    printf "    Debugging using xtrace, verbose and unset variables modes (set -xvu)\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--log")"
    printf "    Turn ON logging to file. \n    \n    Log file is stored in MY_LOG_DIR or in directory provided in LOG_FILE_PATH\n    argument. Log file name will be generated in format\n    './script_name-command_name.log'.\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--log-file LOG-FILE-PATH")"
    printf "    Turn ON logging to file. \n    \n    Log file is stored in directory provided in LOG_FILE_PATH argument or in\n    directory from environment variable MY_LOG_DIR.\n    \n    Log file name is provided explicitly in LOG_FILE_PATH argument.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "$(magenta "--version, -v")"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "$(bold "Environment Variables:")"

    # :environment_variable.usage
    printf "  %s\n" "$(cyan "API_KEY")"
    printf "    Set your API key\n"
    echo

  fi
}

# :command.usage
k_busybox_install_usage() {
  if [[ -n $long_usage ]]; then
    printf "k-busybox install - Install busybox deployment\n"
    echo

  else
    printf "k-busybox install - Install busybox deployment\n"
    echo

  fi

  printf "Alias: i\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  k-busybox install VERSION [CLUSTER_PLAN] [OPTIONS]\n"
  printf "  k-busybox install --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--force, -f")"
    printf "    Overwrite existing files\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "$(bold "Arguments:")"

    # :argument.usage
    printf "  %s\n" "$(blue "VERSION")"
    printf "    version of busybox container\n"
    echo

    # :argument.usage
    printf "  %s\n" "$(blue "CLUSTER_PLAN")"
    printf "    cluster plan in yaml format\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "$(bold "Environment Variables:")"

    # :environment_variable.usage
    printf "  %s\n" "$(cyan "DEFAULT_TARGET_LOCATION")"
    printf "    Set the default location to download to\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  k-busybox install v15 --namespace busybox\n"
    echo

  fi
}

# :command.usage
k_busybox_upgrade_usage() {
  if [[ -n $long_usage ]]; then
    printf "k-busybox upgrade - Upgarde busybox deployment\n"
    echo

  else
    printf "k-busybox upgrade - Upgarde busybox deployment\n"
    echo

  fi

  printf "Alias: u\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  k-busybox upgrade VERSION [OPTIONS]\n"
  printf "  k-busybox upgrade --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--user, -u USER (required)")"
    printf "    Username to use for logging in\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--password, -p PASSWORD")"
    printf "    Password to use for logging in\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "$(bold "Arguments:")"

    # :argument.usage
    printf "  %s\n" "$(blue "VERSION")"
    printf "    version of busybox container\n"
    echo

  fi
}

# :command.usage
k_busybox_delete_usage() {
  if [[ -n $long_usage ]]; then
    printf "k-busybox delete - Delete busybox deployment\n"
    echo

  else
    printf "k-busybox delete - Delete busybox deployment\n"
    echo

  fi

  printf "Alias: d\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  k-busybox delete VERSION [OPTIONS]\n"
  printf "  k-busybox delete --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--user, -u USER (required)")"
    printf "    Username to use for logging in\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--password, -p PASSWORD")"
    printf "    Password to use for logging in\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "$(bold "Arguments:")"

    # :argument.usage
    printf "  %s\n" "$(blue "VERSION")"
    printf "    version of busybox container\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# src/lib/colors.sh

enable_auto_colors() {
  if [[ -z ${NO_COLOR+x} && ! -t 1 ]]; then
    NO_COLOR=1
  fi
}

print_in_color() {
  local color="$1"
  shift
  if [[ "${NO_COLOR:-}" == "" ]]; then
    printf "$color%b\e[0m\n" "$*"
  else
    printf "%b\n" "$*"
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
black() { print_in_color "\e[30m" "$*"; }
white() { print_in_color "\e[37m" "$*"; }

bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }

red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
black_bold() { print_in_color "\e[1;30m" "$*"; }
white_bold() { print_in_color "\e[1;37m" "$*"; }

red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }
black_underlined() { print_in_color "\e[4;30m" "$*"; }
white_underlined() { print_in_color "\e[4;37m" "$*"; }

# :command.command_functions
# :command.function
k_busybox_install_command() {
  # src/install_command.sh
  echo "# This file is located at 'src/install_command.sh'."
  echo "# It contains the implementation for the 'k-busybox install' command."
  echo "# The code you write here will be wrapped by a function named 'k_busybox_install_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

  validate_version_exists ${args[version]}
}

# :command.function
k_busybox_upgrade_command() {
  # src/upgrade_command.sh
  echo "# This file is located at 'src/upgrade_command.sh'."
  echo "# It contains the implementation for the 'k-busybox upgrade' command."
  echo "# The code you write here will be wrapped by a function named 'k_busybox_upgrade_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.function
k_busybox_delete_command() {
  # src/delete_command.sh
  echo "# This file is located at 'src/delete_command.sh'."
  echo "# It contains the implementation for the 'k-busybox delete' command."
  echo "# The code you write here will be wrapped by a function named 'k_busybox_delete_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        k_busybox_usage
        exit
        ;;

      # :flag.case
      --verbose)

        # :flag.case_no_arg
        args['--verbose']=1
        shift
        ;;

      # :flag.case
      --xtrace)

        # :flag.case_no_arg
        args['--xtrace']=1
        shift
        ;;

      # :flag.case
      --unset)

        # :flag.case_no_arg
        args['--unset']=1
        shift
        ;;

      # :flag.case
      --noerrexit)

        # :flag.case_no_arg
        args['--noerrexit']=1
        shift
        ;;

      # :flag.case
      --noexec)

        # :flag.case_no_arg
        args['--noexec']=1
        shift
        ;;

      # :flag.case
      --debug)
        # :flag.conflicts
        for conflict in --xtrace --verbose --unset; do
          if [[ -n "${args[$conflict]:-}" ]]; then
            printf "conflicting options: %s cannot be used with %s\n" "$key" "$conflict" >&2
            exit 1
          fi
        done

        # :flag.case_no_arg
        args['--debug']=1
        shift
        ;;

      # :flag.case
      --log)
        # :flag.conflicts
        if [[ -n "${args['--log-file']:-}" ]]; then
          printf "conflicting options: %s cannot be used with %s\n" "$key" "--log-file" >&2
          exit 1
        fi

        # :flag.case_no_arg
        args['--log']=1
        shift
        ;;

      # :flag.case
      --log-file)
        # :flag.conflicts
        if [[ -n "${args['--log']:-}" ]]; then
          printf "conflicting options: %s cannot be used with %s\n" "$key" "--log" >&2
          exit 1
        fi

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--log-file']="$2"
          shift
          shift
        else
          printf "%s\n" "--log-file requires an argument: --log-file LOG-FILE-PATH" >&2
          exit 1
        fi
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter

  env_var_names+=("API_KEY")

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    install | i)
      action="install"
      shift
      k_busybox_install_parse_requirements "$@"
      shift $#
      ;;

    upgrade | u)
      action="upgrade"
      shift
      k_busybox_upgrade_parse_requirements "$@"
      shift $#
      ;;

    delete | d)
      action="delete"
      shift
      k_busybox_delete_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      k_busybox_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
k_busybox_install_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        k_busybox_install_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter

  env_var_names+=("DEFAULT_TARGET_LOCATION")

  # :command.command_filter
  action="install"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --force | -f)

        # :flag.case_no_arg
        args['--force']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['version']+x} ]]; then
          args['version']=$1
          shift
        # :argument.case
        elif [[ -z ${args['cluster_plan']+x} ]]; then
          args['cluster_plan']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done
  # :command.required_args_filter
  if [[ -z ${args['version']+x} ]]; then
    printf "missing required argument: VERSION\nusage: k-busybox install VERSION [CLUSTER_PLAN] [OPTIONS]\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
k_busybox_upgrade_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        k_busybox_upgrade_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="upgrade"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --user | -u)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--user']="$2"
          shift
          shift
        else
          printf "%s\n" "--user requires an argument: --user, -u USER" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --password | -p)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--password']="$2"
          shift
          shift
        else
          printf "%s\n" "--password requires an argument: --password, -p PASSWORD" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['version']+x} ]]; then
          args['version']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done
  # :command.required_args_filter
  if [[ -z ${args['version']+x} ]]; then
    printf "missing required argument: VERSION\nusage: k-busybox upgrade VERSION [OPTIONS]\n" >&2
    exit 1
  fi

  # :command.required_flags_filter
  if [[ -z ${args['--user']+x} ]]; then
    printf "missing required flag: --user, -u USER\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
k_busybox_delete_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        k_busybox_delete_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="delete"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --user | -u)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--user']="$2"
          shift
          shift
        else
          printf "%s\n" "--user requires an argument: --user, -u USER" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --password | -p)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--password']="$2"
          shift
          shift
        else
          printf "%s\n" "--password requires an argument: --password, -p PASSWORD" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['version']+x} ]]; then
          args['version']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done
  # :command.required_args_filter
  if [[ -z ${args['version']+x} ]]; then
    printf "missing required argument: VERSION\nusage: k-busybox delete VERSION [OPTIONS]\n" >&2
    exit 1
  fi

  # :command.required_flags_filter
  if [[ -z ${args['--user']+x} ]]; then
    printf "missing required flag: --user, -u USER\n" >&2
    exit 1
  fi

}

# :command.user_hooks
before_hook() {
  # src/before.sh
  echo "==[ Before Hook Called ]=="
  inspect_args
}

after_hook() {
  # src/after.sh
  echo "==[ After Hook Called ]=="
}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # src/initialize.sh

  # [[ -f ~/.bashmatic/init.sh ]] || {
  #   echo "Can't find or install Bashmatic. Exiting."
  #   exit 1
  # }
  #source ~/.bashmatic/init.sh
  source ./../k8s.sh
  source ./../vlib.bash
  #set -x

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"
  before_hook

  case "$action" in
    "install") k_busybox_install_command ;;
    "upgrade") k_busybox_upgrade_command ;;
    "delete") k_busybox_delete_command ;;
  esac

  after_hook
}

initialize
run "$@"

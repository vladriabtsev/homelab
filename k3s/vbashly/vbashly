#!/usr/bin/env bash
# This script was generated by bashly 1.1.9 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
vbashly_usage() {
  if [[ -n $long_usage ]]; then
    printf "vbashly - Generate bashly for all first level subdirectories with src subdirectory\n"
    echo

  else
    printf "vbashly - Generate bashly for all first level subdirectories with src subdirectory\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  vbashly [OPTIONS] COMMAND\n"
  printf "  vbashly [COMMAND] --help | -h\n"
  printf "  vbashly --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Run 'bashly generate' for each found bashly project (default)\n" "$(green "generate")"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--verbose")"
    printf "    Enabling verbose Mode (set -v, print every line before it's processed)\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--xtrace")"
    printf "    Using xtrace Mode\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--unset")"
    printf "    Identifying Unset Variables\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--noerrexit")"
    printf "    No exit on error\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--noexec")"
    printf "    No exec mode. Check syntax without execution\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--debug")"
    printf "    Debugging using xtrace, verbose and unset variables modes (set -xvu)\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--log")"
    printf "    Turn ON logging to file. \n    \n    Log file is stored in MY_LOG_DIR or in directory provided in LOG_FILE_PATH\n    argument. Log file name will be generated in format\n    './script_name-command_name.log'.\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--log-file LOG-FILE-PATH")"
    printf "    Turn ON logging to file. \n    \n    Log file is stored in directory provided in LOG_FILE_PATH argument or in\n    directory from environment variable MY_LOG_DIR.\n    \n    Log file name is provided explicitly in LOG_FILE_PATH argument.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "$(magenta "--version, -v")"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "$(bold "Environment Variables:")"

    # :environment_variable.usage
    printf "  %s\n" "$(cyan "MY_LOG_DIR")"
    printf "    Set your default directory for bashly script log files\n"
    echo

  fi
}

# :command.usage
vbashly_generate_usage() {
  if [[ -n $long_usage ]]; then
    printf "vbashly generate - Run 'bashly generate' for each found bashly project\n"
    echo

  else
    printf "vbashly generate - Run 'bashly generate' for each found bashly project\n"
    echo

  fi

  printf "Alias: g\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  vbashly generate [BASHLY_PRJ_DIR]\n"
  printf "  vbashly generate --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "$(bold "Arguments:")"

    # :argument.usage
    printf "  %s\n" "$(blue "BASHLY_PRJ_DIR")"
    printf "    Directory name with bashly project\n"
    printf "    Default: *\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  vbashly 102-busybox\n"
    printf "  vbashly\n"
    printf "  vbashly *longhorn\n"
    echo

  fi
}

# :command.usage
vbashly_exec_usage() {
  if [[ -n $long_usage ]]; then
    printf "vbashly exec - Run 'vbashly exec \"command\"'. For test traps of vbashly script\n"
    echo

  else
    printf "vbashly exec - Run 'vbashly exec \"command\"'. For test traps of vbashly script\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  vbashly exec [COMMAND]\n"
  printf "  vbashly exec --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "$(bold "Arguments:")"

    # :argument.usage
    printf "  %s\n" "$(blue "COMMAND")"
    printf "    Bash command to execute\n"
    printf "    Default: ls\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  vbashly exec\n"
    printf "  vbashly exec \"ls\"\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# src/lib/colors.sh
print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*"
  else
    printf "%b\n" "$*"
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

# :command.command_functions
# :command.function
vbashly_generate_command() {
  # src/generate_command.sh
  #!/usr/bin/env bash

  # https://phoenixnap.com/kb/bash-trap-command
  # https://man7.org/linux/man-pages/man7/signal.7.html
  # https://tldp.org/LDP/Bash-Beginners-Guide/html/sect_12_02.html
  # https://emmer.dev/blog/resetting-the-working-directory-on-shell-script-exit/
  # shellcheck disable=SC2064

  bashly-init-command

  # https://www.linuxbash.sh/post/logging-and-monitoring-from-bash-scripts
  # https://man7.org/linux/man-pages/man1/logger.1.html

  # # https://www.baeldung.com/linux/logging-bash-scripts
  # exec 3>&1 4>&2
  # trap 'exec 2>&4 1>&3' 0 1 2 3
  # exec 1>log.out 2>&1
  # # Everything below will go to the file 'log.out':

  #set -x
  # shellcheck disable=SC2168
  local filename
  # shellcheck disable=SC2168
  local dir
  # shellcheck disable=SC2154
  for file in ${args[bashly_prj_dir]}; do
    #echo "file - $(basename ${file})"
    filename=$(basename "${file}")
    if [[ -d "$file" && $filename != "vbashly" ]]; then
      #echo dir $(dirname "$(realpath ${file})")
      if test -d "$file/src"; then
  	  echo file "$file"
  	  echo filename "$filename"
        dir=$(dirname "$(realpath "${file}")")
  	  echo dir "$dir"
        #cmd [option] "$file" >> results.out
  	fi
    fi
  done
}

# :command.function
vbashly_exec_command() {
  # src/exec_command.sh
  #!/usr/bin/env bash
  #inspect_args
  bashly-init-command

  # shellcheck disable=SC2154
  eval "${args[command]}"

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        vbashly_usage
        exit
        ;;

      # :flag.case
      --verbose)

        # :flag.case_no_arg
        args['--verbose']=1
        shift
        ;;

      # :flag.case
      --xtrace)

        # :flag.case_no_arg
        args['--xtrace']=1
        shift
        ;;

      # :flag.case
      --unset)

        # :flag.case_no_arg
        args['--unset']=1
        shift
        ;;

      # :flag.case
      --noerrexit)

        # :flag.case_no_arg
        args['--noerrexit']=1
        shift
        ;;

      # :flag.case
      --noexec)

        # :flag.case_no_arg
        args['--noexec']=1
        shift
        ;;

      # :flag.case
      --debug)
        # :flag.conflicts
        for conflict in --xtrace --verbose --unset; do
          if [[ -n "${args[$conflict]:-}" ]]; then
            printf "conflicting options: %s cannot be used with %s\n" "$key" "$conflict" >&2
            exit 1
          fi
        done

        # :flag.case_no_arg
        args['--debug']=1
        shift
        ;;

      # :flag.case
      --log)
        # :flag.conflicts
        if [[ -n "${args['--log-file']:-}" ]]; then
          printf "conflicting options: %s cannot be used with %s\n" "$key" "--log-file" >&2
          exit 1
        fi

        # :flag.case_no_arg
        args['--log']=1
        shift
        ;;

      # :flag.case
      --log-file)
        # :flag.conflicts
        if [[ -n "${args['--log']:-}" ]]; then
          printf "conflicting options: %s cannot be used with %s\n" "$key" "--log" >&2
          exit 1
        fi

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--log-file']="$2"
          shift
          shift
        else
          printf "%s\n" "--log-file requires an argument: --log-file LOG-FILE-PATH" >&2
          exit 1
        fi
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter

  env_var_names+=("MY_LOG_DIR")

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    generate | g)
      action="generate"
      shift
      vbashly_generate_parse_requirements "$@"
      shift $#
      ;;

    exec)
      action="exec"
      shift
      vbashly_exec_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    *)
      action="generate"
      vbashly_generate_parse_requirements "$@"
      shift $#
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
vbashly_generate_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        vbashly_generate_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="generate"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['bashly_prj_dir']+x} ]]; then
          args['bashly_prj_dir']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.default_assignments
  [[ -n ${args['bashly_prj_dir']:-} ]] || args['bashly_prj_dir']="*"

}

# :command.parse_requirements
vbashly_exec_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        vbashly_exec_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="exec"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['command']+x} ]]; then
          args['command']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.default_assignments
  [[ -n ${args['command']:-} ]] || args['command']="ls"

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # src/initialize.sh
  set -e
  source ../../bash-lib.sh

  bashly-init-script

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "generate") vbashly_generate_command ;;
    "exec") vbashly_exec_command ;;
  esac
}

initialize
run "$@"

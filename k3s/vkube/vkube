#!/usr/bin/env bash
# This script was generated by bashly 1.1.9 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
vkube_usage() {
  if [[ -n $long_usage ]]; then
    printf "vkube - Kubernetes installation\n"
    echo

  else
    printf "vkube - Kubernetes installation\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  vkube [OPTIONS] COMMAND\n"
  printf "  vkube [COMMAND] --help | -h\n"
  printf "  vkube --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Install selected kubernetes components and services\n" "$(green "install")"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--verbose")"
    printf "    Enabling verbose Mode (set -v, print every line before it's processed)\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--xtrace")"
    printf "    Using xtrace Mode\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--unset")"
    printf "    Identifying Unset Variables\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--noerrexit")"
    printf "    No exit on error\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--noexec")"
    printf "    No exec mode. Check syntax without execution\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--debug")"
    printf "    Debugging using xtrace, verbose and unset variables modes (set -xvu)\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--log")"
    printf "    Turn ON logging to file. \n    \n    Log file is stored in MY_LOG_DIR or in directory provided in LOG_FILE_PATH\n    argument. Log file name will be generated in format\n    './script_name-command_name.log'.\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--log-file LOG-FILE-PATH")"
    printf "    Turn ON logging to file. \n    \n    Log file is stored in directory provided in LOG_FILE_PATH argument or in\n    directory from environment variable MY_LOG_DIR.\n    \n    Log file name is provided explicitly in LOG_FILE_PATH argument.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "$(magenta "--version, -v")"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "$(bold "Environment Variables:")"

    # :environment_variable.usage
    printf "  %s\n" "$(cyan "MY_LOG_DIR")"
    printf "    Set your default directory for bashly script log files\n"
    echo

  fi
}

# :command.usage
vkube_exec_usage() {
  if [[ -n $long_usage ]]; then
    printf "vkube exec - Run 'vkube exec \"command\"'. For test traps of vkube script\n"
    echo

  else
    printf "vkube exec - Run 'vkube exec \"command\"'. For test traps of vkube script\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  vkube exec [COMMAND]\n"
  printf "  vkube exec --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "$(bold "Arguments:")"

    # :argument.usage
    printf "  %s\n" "$(blue "COMMAND")"
    printf "    Bash command to execute\n"
    printf "    Default: ls\n"
    echo

  fi
}

# :command.usage
vkube_install_usage() {
  if [[ -n $long_usage ]]; then
    printf "vkube install - Install selected kubernetes components and services\n"
    echo

  else
    printf "vkube install - Install selected kubernetes components and services\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  vkube install COMMAND\n"
  printf "  vkube install [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Install kubernetes and all services\n" "$(green "all")    "
  printf "  %s   Install 'busybox' pod\n" "$(green "busybox")"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  vkube --help\n"
    printf "  vkube install all\n"
    printf "  vkube install busybox\n"
    printf "  vkube backup all\n"
    printf "  vkube restore all\n"
    echo

  fi
}

# :command.usage
vkube_install_all_usage() {
  if [[ -n $long_usage ]]; then
    printf "vkube install all - Install kubernetes and all services\n"
    echo

  else
    printf "vkube install all - Install kubernetes and all services\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  vkube install all\n"
  printf "  vkube install all --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
vkube_install_busybox_usage() {
  if [[ -n $long_usage ]]; then
    printf "vkube install busybox - Install 'busybox' pod\n"
    echo

  else
    printf "vkube install busybox - Install 'busybox' pod\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  vkube install busybox\n"
  printf "  vkube install busybox --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.command_functions
# :command.function
vkube_exec_command() {
  # src/exec_command.sh
  #!/usr/bin/env bash
  #inspect_args
  bashly-init-command

  # shellcheck disable=SC2154
  eval "${args[command]}"

}

# :command.function
vkube_install_all_command() {
  # src/install_all_command.sh
  inspect_args

}

# :command.function
vkube_install_busybox_command() {
  # src/install_busybox_command.sh
  #!/usr/bin/env bash
  #inspect_args
  bashly-init-command

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        vkube_usage
        exit
        ;;

      # :flag.case
      --verbose)

        # :flag.case_no_arg
        args['--verbose']=1
        shift
        ;;

      # :flag.case
      --xtrace)

        # :flag.case_no_arg
        args['--xtrace']=1
        shift
        ;;

      # :flag.case
      --unset)

        # :flag.case_no_arg
        args['--unset']=1
        shift
        ;;

      # :flag.case
      --noerrexit)

        # :flag.case_no_arg
        args['--noerrexit']=1
        shift
        ;;

      # :flag.case
      --noexec)

        # :flag.case_no_arg
        args['--noexec']=1
        shift
        ;;

      # :flag.case
      --debug)
        # :flag.conflicts
        for conflict in --xtrace --verbose --unset; do
          if [[ -n "${args[$conflict]:-}" ]]; then
            printf "conflicting options: %s cannot be used with %s\n" "$key" "$conflict" >&2
            exit 1
          fi
        done

        # :flag.case_no_arg
        args['--debug']=1
        shift
        ;;

      # :flag.case
      --log)
        # :flag.conflicts
        if [[ -n "${args['--log-file']:-}" ]]; then
          printf "conflicting options: %s cannot be used with %s\n" "$key" "--log-file" >&2
          exit 1
        fi

        # :flag.case_no_arg
        args['--log']=1
        shift
        ;;

      # :flag.case
      --log-file)
        # :flag.conflicts
        if [[ -n "${args['--log']:-}" ]]; then
          printf "conflicting options: %s cannot be used with %s\n" "$key" "--log" >&2
          exit 1
        fi

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--log-file']="$2"
          shift
          shift
        else
          printf "%s\n" "--log-file requires an argument: --log-file LOG-FILE-PATH" >&2
          exit 1
        fi
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter

  env_var_names+=("MY_LOG_DIR")

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    exec)
      action="exec"
      shift
      vkube_exec_parse_requirements "$@"
      shift $#
      ;;

    install)
      action="install"
      shift
      vkube_install_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      vkube_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
vkube_exec_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        vkube_exec_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="exec"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['command']+x} ]]; then
          args['command']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.default_assignments
  [[ -n ${args['command']:-} ]] || args['command']="ls"

}

# :command.parse_requirements
vkube_install_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        vkube_install_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    all)
      action="all"
      shift
      vkube_install_all_parse_requirements "$@"
      shift $#
      ;;

    busybox)
      action="busybox"
      shift
      vkube_install_busybox_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      vkube_install_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
vkube_install_all_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        vkube_install_all_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="install all"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
vkube_install_busybox_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        vkube_install_busybox_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="install busybox"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # src/initialize.sh
  set -e
  source ../../bash-lib.sh

  bashly-init-script

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "exec") vkube_exec_command ;;
    "install") vkube_install_command ;;
    "install all") vkube_install_all_command ;;
    "install busybox") vkube_install_busybox_command ;;
  esac
}

initialize
run "$@"
